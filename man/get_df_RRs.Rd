% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_df_RRs.R
\name{get_df_RRs}
\alias{get_df_RRs}
\title{Create a Dataframe from Reduced Predictions}
\usage{
get_df_RRs(pred)
}
\arguments{
\item{pred}{An object of class "\code{crossreduce}" or "\code{crosspred}".}
}
\value{
A tibble with with the following columns:
\itemize{
\item \code{exposure}: The values of the predictor variable.
\item \code{RR}: The predicted risk, rate, or odds ratio from \code{crossreduce}.
\item \code{RR_low}, \code{RR_high}: The lower/upper bound of the confidence bands for \code{RR}. Depends on the \code{ci.level} argument in \code{crossreduce}.
\item \code{fit}: The predicted output from \code{crossreduce}.
\item \code{low}, \code{high}: The lower/upper bound of the confidence bands for \code{fit}. Depends on the \code{ci.level} argument in \code{crossreduce}.
}
}
\description{
This function extracts the predicted exposure response curve and its associated
confidence bands from a DLNM prediction. This function accepts a \code{crossreduce}
or \code{crosspred} object and, depending on the model link used in the prediction,
will return values associated with the RR or output.
}
\examples{

library(dlnm)
library(ggplot2)
# The NYC airquality sample dataset
head(airquality, 10)

# Arguments to specify cross-basis
arg_var <- list(fun = "ns", knots = quantile(airquality$Temp, c(.1, .75, .9)))
arg_lag <- list(fun = "ns", knots = logknots(7, nk = 3))

# Cross-basis and model fit
cb <- crossbasis(airquality$Temp, lag = 7, argvar = arg_var, arglag = arg_lag)
fit1 <- glm(Ozone ~ cb, family = "gaussian",     data = airquality)
fit2 <- glm(Ozone ~ cb, family = "quasipoisson", data = airquality)

# Prediction and extracted RRs (or output)
pred1 <- crossreduce(cb, fit1)
df_RR1 <- get_df_RRs(pred1)

pred2 <- crossreduce(cb, fit2)
df_RR2 <- get_df_RRs(pred2)

# Plots with ggplot2
df_RR1 |>
  ggplot() +
  geom_line(aes(exposure, fit)) +
  geom_ribbon(aes(exposure, ymin = low, ymax = high), alpha = .2)

df_RR2 |>
  ggplot() +
  geom_line(aes(exposure, RR)) +
  geom_ribbon(aes(exposure, ymin = RR_low, ymax = RR_high), alpha = .2)
}
